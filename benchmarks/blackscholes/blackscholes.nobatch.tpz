// Copyright (c) 2007 Intel Corp.

// Black-Scholes
// Analytical method for calculating European Options
//
// 
// Reference Source: Options, Futures, and Other Derivatives, 3rd Edition, Prentice 
// Hall, John C. Hull,

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "blackscholes.h"
#include "relax_lib.h"

#define ERR_CHK 
//#define AUTOCHUNKSIZE 
#define AUTO_NUM_RUNS 20
//#define AUTO_NUM_RUNS 1
#ifdef ENABLE_PARSEC_HOOKS
#include <hooks.h>
#endif

// Multi-threaded pthreads header
#ifdef ENABLE_THREADS
// Add the following line so that icc 9.0 is compatible with pthread lib.
#define __thread __threadp
MAIN_ENV
#undef __thread
#endif


//Precision to use for calculations
#define fptype float


typedef struct OptionData_ {
        fptype s;          // spot price
        fptype strike;     // strike price
        fptype r;          // risk-free interest rate
        fptype divq;       // dividend rate
        fptype v;          // volatility
        fptype t;          // time to maturity or option expiration in years 
                           //     (1yr = 1.0, 6mos = 0.5, 3mos = 0.25, ..., etc)  
        char OptionType;   // Option type.  "P"=PUT, "C"=CALL
        fptype divs;       // dividend vals (not used in this test)
        fptype DGrefval;   // DerivaGem Reference Value
} OptionData;

OptionData *data;
fptype *prices;
int numOptions;

int    * otype;
fptype * sptprice;
fptype * strike;
fptype * rate;
fptype * volatility;
fptype * otime;
int numError = 0;
int nThreads;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Cumulative Normal Distribution Function
// See Hull, Section 11.8, P.243-244
#define inv_sqrt_2xPI 0.39894228040143270286

fptype CNDF ( fptype InputX ) 
{
    IDEF(sign);
    FPUREL(InputX);
    FPDEF(OutputX); 
    FPDEF(xInput);
    FPDEF(xNPrimeofX);
    FPDEF(expValues);
    FPDEF(xK2);
    FPDEF(xK2_2);
    FPDEF(xK2_3);
    FPDEF(xK2_4);
    FPDEF(xK2_5);
    FPDEF(xLocal);
    FPDEF(xLocal_1);
    FPDEF(xLocal_2);
    FPDEF(xLocal_3);

    // Check for negative value of InputX
    if (InputX < 0.0) {
        InputX = -InputX;
        sign = 1;
    } else 
        sign = 0;

    xInput = InputX;
 
    // Compute NPrimeX term common to both four & six decimal accuracy calcs
    FPDEF(tmp);
    tmp = -0.5f * InputX * InputX;
    expValues = t_exp(tmp);
    xNPrimeofX = expValues;
    xNPrimeofX = xNPrimeofX * inv_sqrt_2xPI;

    xK2 = 0.2316419 * xInput;
    xK2 = 1.0 + xK2;
    xK2 = 1.0 / xK2;
    xK2_2 = xK2 * xK2;
    xK2_3 = xK2_2 * xK2;
    xK2_4 = xK2_3 * xK2;
    xK2_5 = xK2_4 * xK2;
    
    xLocal_1 = xK2 * 0.319381530;
    xLocal_2 = xK2_2 * (-0.356563782);
    xLocal_3 = xK2_3 * 1.781477937;
    xLocal_2 = xLocal_2 + xLocal_3;
    xLocal_3 = xK2_4 * (-1.821255978);
    xLocal_2 = xLocal_2 + xLocal_3;
    xLocal_3 = xK2_5 * 1.330274429;
    xLocal_2 = xLocal_2 + xLocal_3;

    xLocal_1 = xLocal_2 + xLocal_1;
    xLocal   = xLocal_1 * xNPrimeofX;
    xLocal   = 1.0 - xLocal;

    OutputX  = xLocal;
    
    if (sign) {
        OutputX = 1.0 - OutputX;
    }
    
    return OutputX;
} 

//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
fptype BlkSchlsEqEuroNoDiv_SINGLE( fptype sptprice,
                            fptype strike, fptype rate, fptype volatility,
                            fptype time, int otype, float timet )
{
	FPUREL(sptprice);
	FPUREL(strike);
	FPUREL(rate);
	FPUREL(volatility);
	FPUREL(time);
	IUREL(otype);
	FPUREL(timet);
	
    FPDEF(OptionPrice);

    // local private working variables for the calculation
    FPDEF(xStockPrice);
    FPDEF(xStrikePrice);
    FPDEF(xRiskFreeRate);
    FPDEF(xVolatility);
    FPDEF(xTime);
    FPDEF(xSqrtTime);

    FPDEF(logValues);
    FPDEF(xLogTerm);
    FPDEF(xD1); 
    FPDEF(xD2);
    FPDEF(xPowerTerm);
    FPDEF(xDen);
    FPDEF(d1);
    FPDEF(d2);
    FPDEF(FutureValueX);
    FPDEF(NofXd1);
    FPDEF(NofXd2);
    FPDEF(NegNofXd1);
    FPDEF(NegNofXd2);    
    
    xStockPrice = sptprice;
    xStrikePrice = strike;
    xRiskFreeRate = rate;
    xVolatility = volatility;

    xTime = time;
    xSqrtTime = sqrt(xTime);
    logValues = log( sptprice / strike );
    xLogTerm = logValues;
        
    
    xPowerTerm = xVolatility * xVolatility;
    xPowerTerm = xPowerTerm * 0.5;
        
    xD1 = xRiskFreeRate + xPowerTerm;
    xD1 = xD1 * xTime;
    xD1 = xD1 + xLogTerm;

    xDen = xVolatility * xSqrtTime;
    xD1 = xD1 / xDen;
    xD2 = xD1 -  xDen;

    d1 = xD1;
    d2 = xD2;
    NofXd1 = CNDF( d1 ); //these should be from zero to one.
    NofXd2 = CNDF( d2 );
    FutureValueX = strike * ( t_exp( -(rate)*(time) ) );        
    if (otype == 0) {            
        OptionPrice = (sptprice * NofXd1) - (FutureValueX * NofXd2);
    } else { 
        NegNofXd1 = (1.0 - NofXd1);
        NegNofXd2 = (1.0 - NofXd2);
        OptionPrice = (FutureValueX * NegNofXd2) - (sptprice * NegNofXd1);
    }
    
    return OptionPrice;
}

#define NELEMS 1 

/////////////
//16: 69%
//128: 71%
//63% kernel
int BlkSchlsEqEuroNoDiv() {
	
	//chunking using base 
	taskset Blackscholes(i=0; i<numOptions; i+=NELEMS){
		compute	in(float tsptprice[NELEMS] = &sptprice[i],
				   float tstrike[NELEMS] = &strike[i],
				   float trate[NELEMS]= &rate[i],
				   float tvolatility[NELEMS] = &volatility[i],
				   float ttime[NELEMS]= &otime[i],
				   int totype[NELEMS] = &otype[i]
				   ) 
				out(float tfprice[NELEMS])
		{
			int ttimet = 0;
			for(int q=0; q < NELEMS; q++){
				float r1 = BlkSchlsEqEuroNoDiv_SINGLE(tsptprice[q], tstrike[q], trate[q], tvolatility[q],ttime[q],totype[q],ttimet);
				tfprice[q] = r1;
			}
		}
		transform in(float tsptprice, float tfprice) out(float normavgprice){
			normavgprice=0;
			for(int q=0; q < NELEMS; q++) 
				normavgprice += tfprice[q]-tsptprice[q];
			
		}
		combine {
			float priceDelta;
			for(int q=0; q < NELEMS; q++){
				priceDelta = data[i+q].DGrefval - tfprice[q];
				prices[i+q] = tfprice[q];
				if( fabs(priceDelta) >= 1e-4 ){
				/*
					printf("Error on %d. Computed=%.5f, Ref=%.5f, Delta=%.5f\n",
							 i, tfprice[q], data[i+q].DGrefval, priceDelta);
				*/
					numError ++;
				}
			}
		}
		
	}
}

int topaz_main(int argc, char **argv)
{

	
    FILE *file;
    int i;
    int loopnum;
    fptype * buffer;
    int * buffer2;
    int rv;

   if (argc != 4)
        {
                printf("Usage:\n\t%s <nthreads> <inputFile> <outputFile>\n", argv[0]);
                exit(1);
        }
    nThreads = atoi(argv[1]);
    char *inputFile = argv[2];
    char *outputFile = argv[3];
	
	printf("Input File: %s\n", inputFile);
    //Read input data from file
    file = fopen(inputFile, "r");
    if(file == NULL) {
      printf("ERROR: Unable to open file `%s'.\n", inputFile);
      exit(1);
    }
    rv = fscanf(file, "%i", &numOptions);
    if(rv != 1) {
      printf("ERROR: Unable to read from file `%s'.\n", inputFile);
      fclose(file);
      exit(1);
    }
    if(nThreads > numOptions) {
      printf("WARNING: Not enough work, reducing number of threads to match number of options.\n");
      nThreads = numOptions;
    }

    if(nThreads != 1) {
        printf("Error: <nthreads> must be 1 (serial version)\n");
        exit(1);
    }

		int dsize = numOptions;
    // alloc spaces for the option data
    data = (OptionData*)malloc(dsize*sizeof(OptionData));
    prices = (fptype*)malloc(dsize*sizeof(fptype));
    for ( loopnum = 0; loopnum < numOptions; ++ loopnum )
    {
        rv = fscanf(file, "%f %f %f %f %f %f %c %f %f", &data[loopnum].s, &data[loopnum].strike, &data[loopnum].r, &data[loopnum].divq, &data[loopnum].v, &data[loopnum].t, &data[loopnum].OptionType, &data[loopnum].divs, &data[loopnum].DGrefval);
        if(rv != 9) {
          printf("ERROR: Unable to read from file `%s'.\n", inputFile);
          fclose(file);
          exit(1);
        }
    }
    rv = fclose(file);
    if(rv != 0) {
      printf("ERROR: Unable to close file `%s'.\n", inputFile);
      exit(1);
    }

    printf("Num of Options: %d\n", numOptions);
    printf("Num of Runs: %d\n", AUTO_NUM_RUNS);

		#define PAD 256
		#define LINESIZE 64
	
    buffer = (fptype *) malloc(5 * numOptions * sizeof(fptype) + PAD);
    sptprice = (fptype *) (((unsigned long long)buffer + PAD) & ~(LINESIZE - 1));
    strike = sptprice + numOptions;
    rate = strike + numOptions;
    volatility = rate + numOptions;
    otime = volatility + numOptions;

    buffer2 = (int *) malloc(numOptions * sizeof(fptype) + PAD);
    otype = (int *) (((unsigned long long)buffer2 + PAD) & ~(LINESIZE - 1));

    for (i=0; i<numOptions; i++) {
        otype[i]      = (data[i].OptionType == 'P') ? 1 : 0;
        sptprice[i]   = data[i].s;
        strike[i]     = data[i].strike;
        rate[i]       = data[i].r;
        volatility[i] = data[i].v;    
        otime[i]      = data[i].t;
    }

    printf("Size of data: %ld\n", numOptions * (sizeof(OptionData) + sizeof(int)));

    //serial version
    for(i=0; i < AUTO_NUM_RUNS; i++){
			printf("iteration %d\n",i);
			BlkSchlsEqEuroNoDiv();
			printf("done\n");
	}

		printf("writing to file\n");
    //Write prices to output file
    file = fopen(outputFile, "w");
    if(file == NULL) {
      printf("ERROR: Unable to open file `%s'.\n", outputFile);
      exit(1);
    }
    rv = fprintf(file, "%i\n", numOptions);
    if(rv < 0) {
      printf("ERROR: Unable to write to file `%s'.\n", outputFile);
      fclose(file);
      exit(1);
    }
    for(i=0; i<numOptions; i++) {
      rv = fprintf(file, "%.18f\n", prices[i]);
      if(rv < 0) {
        printf("ERROR: Unable to write to file `%s'.\n", outputFile);
        fclose(file);
        exit(1);
      }
    }
    rv = fclose(file);
    if(rv != 0) {
      printf("ERROR: Unable to close file `%s'.\n", outputFile);
      exit(1);
    }

#ifdef ERR_CHK
    printf("Num Errors: %d\n", numError);
#endif
/*
		free(buffer);
		free(buffer2);
    free(data);
    free(prices);
*/
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_bench_end();
#endif
    return 0;
}
