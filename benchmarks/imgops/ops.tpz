#include "ops.h"
#include "math.h"
#define IDX(i,j,w) ((i)*(w)+(j))
#define R(k) (3*(k))
#define G(k) (3*(k)+1)
#define B(k) (3*(k)+2)

#include "stdio.h"




extern "C" void scale(float fact, int* src, int sw, int sh, int * dest, int dw, int dh){
	float delta_i=1.0/fact, delta_j=1.0/fact; 
	#define BILINEAR(ci, cj, nexti, nextj, previ, prevj, c_ul,c_ur,c_ll,c_lr) \
	 (1.0/((nexti-previ)*(nextj-prevj) != 0 ? (nexti-previ)*(nextj-prevj) : 1 )* \
	 (c_lr*(nextj-cj)*(nexti-ci)+c_ur*(nextj-cj)*(ci-previ)+c_ll*(cj-prevj)*(nexti-ci)+c_ul*(cj-prevj)*(ci-previ)))
 
	int previ, prevj;
	int nexti, nextj;
	float zi, zj;
	printf("started computation\n");
	taskset scale(k=0; k < dh*dw; k+=1) {
		before {
			zi = delta_i*(k/dw);
			zj = delta_j*(k%dw);
			previ = floor(zi); prevj = floor(zj);
			nexti = ceil(zi); nextj = ceil(zj);
			previ = (previ !=0 && previ == nexti) ? previ-1: previ;
			prevj = (prevj != 0 && prevj == nextj) ? prevj-1: prevj;
			if(nexti >= sh) nexti=sh-1;
			if(nextj >= sw) nextj=sw-1;
		}
		compute in(
				float si = zi,
				float sj = zj,
				float factor = fact,
				int lr[3] = (int*) &src[R(IDX(previ, prevj,sw))],
				int ll[3] = (int*) &src[R(IDX(previ,nextj,sw))],
				int ur[3] = (int*) &src[R(IDX(nexti,prevj,sw))],
				int ul[3] = (int*) &src[R(IDX(nexti, nextj,sw))]
				)
				
			 out(
					int dest_r, int dest_g, int dest_b
				)
			 {
				 if(factor >= 1){
					int previ, prevj, nexti, nextj;
					previ = floor(si); prevj = floor(sj);
					nexti = ceil(si); nextj = ceil(sj);
					previ = (previ !=0 && previ == nexti) ? previ-1: previ;
					prevj = (prevj != 0 && prevj == nextj) ? prevj-1: prevj;
					dest_r = BILINEAR(si, sj, nexti, nextj, previ, prevj, ul[0], ur[0], ll[0], lr[0]);
					dest_g = BILINEAR(si, sj, nexti, nextj, previ, prevj, ul[1], ur[1], ll[1], lr[1]);
					dest_b = BILINEAR(si, sj, nexti, nextj, previ, prevj, ul[2], ur[2], ll[2], lr[2]);
					
				 }
				 else{
					 dest_r =  ul[0];
					 dest_g =  ul[1];
					 dest_b =  ul[2];
				 }
			 }
	     transform in(int lr, int dest_r, int dest_g, int dest_b) out(int err){
			//per pixel error
			#define pr(x) (x)*(x)
			err = pr(dest_r-lr[0])+pr(dest_g-lr[1])+pr(dest_b-lr[2]);
			
		 }
		 combine {
			 int i = k/dw;
			 int j = k%dw;
			 dest[R(IDX(i,j,dw))] = dest_r;
			 dest[G(IDX(i,j,dw))] = dest_g;
			 dest[B(IDX(i,j,dw))] = dest_b;
			 
		 }
		
	}

	printf("finished computation\n");

}
/*
 * TODO
 * 
 */
extern "C" void rotate(float degrees, int* src, int sw, int sh, int * dest, int dw, int dh){
	
}

extern "C" void posterize(float degrees, int* src, int sw, int sh, int * dest, int dw, int dh){
	
}

extern "C" void blur(float degrees, int* src, int sw, int sh, int * dest, int dw, int dh){
	
}
/*
 * TODO: Add rotate, contour ( k-means)
 */

int topaz_main(int argc, char ** argv){
	
	main_routine(argc, argv);

}
