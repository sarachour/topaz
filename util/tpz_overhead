#!/usr/bin/python

import sys
from os import listdir
from os.path import isfile, join

if(len(sys.argv) < 2):
	print "tpz_enrgy path"
	exit(1);
 
path = sys.argv[1];
print path

# From pin_util.h
tmap = {
	0: "topaz",
	1: "main",
	2: "comm",
	3: "send",
	4: "task",
	5: "serialize",
	6: "topaz-transform",
	7: "topaz-detect"
}

def read_time_profile(path):
	h = open(path,'r')
	
	timers={};
	cnts={};
	for k in tmap.keys():
		timers[tmap[k]] = 0;
		cnts[tmap[k]] = 0;
		
	for line in h:
		try:
			entries = line.split('\t')
			iid = int(entries[0]);
			cnt = float(entries[1]);
			id = tmap[iid];
			if id not in timers:
				timers[id] = 0;
				cnts[id] = 0;
				
			timers[id]+=cnt;
			cnts[id]+=1;
		except ValueError:
			print "TIME: skipping line."
	result = {};
	result["timers"] = timers;
	result["cnts"] = cnts;
	return result;

def read_comm_profile(path):
	h = open(path,'r');
	sent_val = 0;
	recv_val = 0;
	n = 0;
	for line in h:
		try:
			entries = line.split('\t');
			taskset = int(entries[0]);
			task = int(entries[1]);
			sdat = int(entries[2]);
			rdat = int(entries[3]);

			sent_val += sdat;
			recv_val += rdat;
			n+=1;
			
		except ValueError:
			print "COMM: skipping line"
	
	
			
	result = {};
	# average per/task communication overhead
	result["sent"] = float(sent_val)/n;
	result["recvd"] = float(recv_val)/n;
	return result;
	
def analyze_detail(name,m):
	m_t = m['main'] + m['topaz'] + m['task']+m['topaz-transform']+m['topaz-detect']
	# + m['send']+m['serialize'];
	m_top = m['topaz']+m['topaz-transform']+m['topaz-detect']
	
	p_m = (m['main'])/m_t*100.0;
	p_t = (m_top)/m_t*100.0;
	p_ta = (m['task'])/m_t*100.0;
	p_c = (m['send'])/m_t*100.0;
	p_s = (m['serialize']/m_t*100.0);
	p_trans = (m['topaz-transform'])/m_top*100.0;
	p_det =  (m['topaz-detect'])/m_top*100.0;
	print "# ",name," Machine"
	print "	Percent Main: ", p_m
	print "	Percent Topaz: ", p_t
	print "		+ Abstract Output: ",p_trans
	print "		+ Detect: ",p_det
	print "		+ Other: ",(100-p_det-p_trans)
	print "	Percent Task: ", p_ta
	#print "	Percent Communication:", p_c
	#print "	Percent Serialization:", p_s
def analyze_overhead(m,mc,w,wc):
	#print "	#Main"
	print wc
	print mc
	print "" 
	ser_overhead = (1.0*wc['comm'])/(mc['task']+ wc['task']);
	print "Serialization Overhead (Ser:Task)",ser_overhead 
		
def avg(key,m,w,mc,wc):
	n = (mc['task'] + wc['task']);
	if n == 0:
		return 0;
	return (m[key] + w[key])/n;
	
def ratio(v,base):
	return str(float(v)/base) + ":" + str(1) + "    ("+str(v)+","+str(base)+")";
	
def analyze(d, c):
	#topaz timer: includes comm
	#comm timer: includes send
	#main timer: includes topaz,comm,send
	t_m = d[0]['data']['timers']; t_w = d[1]['data']['timers']
	t_mc = d[0]['data']['cnts']; t_wc = d[1]['data']['cnts']
	c_m = c[0]['data']; c_w = c[1]['data'];
	
	avg_task = avg('task',t_m,t_w,t_mc,t_wc);
	avg_reexec = avg('task',t_m,{'task':0},t_mc,{'task':0})
	avg_detect = avg('topaz-detect',t_m,t_w,t_mc,t_wc);
	avg_transform = avg('topaz-transform',t_m,t_w,t_mc,t_wc);
	avg_topaz = avg('topaz',t_m,t_w,t_mc,t_wc);
	avg_main = avg('main',t_m,t_w,t_mc,t_wc);
	avg_sent = c_m['sent']
	avg_recv = c_w['sent']
	print "### Averages"
	print "Task: "+str(avg_task)
	print "Reexec: "+str(avg_reexec)
	print "Detect: "+str(avg_detect)
	print "Transform: "+str(avg_transform)
	print "Topaz: "+str(avg_topaz)
	print "Main: "+str(avg_main)
	print "Avg Input Data (bytes): "+str(avg_sent)
	print "Avg Output Data (bytes): "+str(avg_recv)
	print ""
	print ""
	print "### Ratios (:Task Instruction)"
	print "Reexec: "+ratio(avg_reexec, avg_task)
	print "Detect: "+ratio(avg_detect, avg_task)	
	print "Transform: "+ratio(avg_transform, avg_task)
	print "Topaz: "+ratio(avg_topaz, avg_task)
	print "Main: "+ratio(avg_main, avg_task)
	print "Data (bytes/inst): "+ratio(avg_sent + avg_recv, avg_task)

	
	
def read():
	timers_list = {};
	comm_list = {};
	for f in listdir(path):
		if isfile(join(path,f)):
			profile = {};
			if((f.split('.')[0]) == "timer"):
				profile["path"] = join(path,f)
				profile["id"] = int(f.split('.')[1]);
				profile["data"] = read_time_profile(join(path,f));
				timers_list[profile["id"]] = profile;
			elif(f.split('.')[0] == "comm"):
				profile["path"] = join(path,f)
				profile["id"] = int(f.split('.')[1]);
				profile["data"] = read_comm_profile(join(path,f));
				comm_list[profile["id"]] = profile;
				#print profile_list.keys();
		#print profile_list
	return timers_list,comm_list;

timers,comms = read();
print comms
analyze(timers, comms);
