#!/usr/bin/python

import sys
from os import listdir
from os.path import isfile, join

if(len(sys.argv) < 2):
	print "tpz_enrgy path model"
	exit(1);
 
path = sys.argv[1];
model = sys.argv[2];
print path

# From pin_util.h
tmap = {
	0: "topaz",
	1: "main",
	2: "comm",
	3: "send",
	4: "task",
	5: "serialize",
	6: "topaz-transform",
	7: "topaz-detect"
}

def read_profile(path):
	h = open(path,'r')
	
	timers={};
	cnts={};
	for k in tmap.keys():
		timers[tmap[k]] = 0;
		
	for line in h:
		try:
			entries = line.split('\t')
			iid = int(entries[0]);
			cnt = float(entries[1]);
			id = tmap[iid];
			if id not in timers:
				timers[id] = 0;
			if id not in cnts:
				cnts[id] = 0;
			timers[id]+=cnt;
			cnts[id]+=1;
		except ValueError:
			print "skipping line."
	result = {};
	result["timers"] = timers;
	result["cnts"] = cnts;
	return result;

def analyze_detail(name,m):
	m_t = m['main'] + m['topaz'] + m['task']+m['topaz-transform']+m['topaz-detect']
	# + m['send']+m['serialize'];
	m_top = m['topaz']+m['topaz-transform']+m['topaz-detect']
	
	p_m = (m['main'])/m_t*100.0;
	p_t = (m_top)/m_t*100.0;
	p_ta = (m['task'])/m_t*100.0;
	p_c = (m['send'])/m_t*100.0;
	p_s = (m['serialize']/m_t*100.0);
	p_trans = (m['topaz-transform'])/m_top*100.0;
	p_det =  (m['topaz-detect'])/m_top*100.0;
	print "# ",name," Machine"
	print "	Percent Main: ", p_m
	print "	Percent Topaz: ", p_t
	print "		+ Abstract Output: ",p_trans
	print "		+ Detect: ",p_det
	print "		+ Other: ",(100-p_det-p_trans)
	print "	Percent Task: ", p_ta
	#print "	Percent Communication:", p_c
	#print "	Percent Serialization:", p_s
def analyze_overhead(m,mc,w,wc):
	#print "	#Main"
	print wc
	print mc
	print "" 
	ser_overhead = (1.0*wc['comm'])/(mc['task']+ wc['task']);
	print "Serialization Overhead (Ser:Task)",ser_overhead 
		
def analyze(d, mode):
	#topaz timer: includes comm
	#comm timer: includes send
	#main timer: includes topaz,comm,send
	m = d[0]['data']['timers']; w = d[1]['data']['timers']
	mc = d[0]['data']['cnts']; wc = d[1]['data']['cnts']
	m_t = m['main'] + m['task'] + m['topaz'] + m['topaz-transform'] + m['topaz-detect'];
	w_t = w['main'] + w['task'] + w['topaz'] + w['topaz-transform'] + w['topaz-detect'];
	
	p_m = m_t/(m_t+w_t);
	p_w = (w_t)/(w_t+m_t - m['task'] - m['topaz-transform'] - m['topaz-detect'])
	p_w_r =  (w_t)/(w_t+m_t)
	print "#General"
	print "	Percent Main:", p_m
	print "	Percent Worker:", p_w_r,":",p_w
	#Specific Percentages
	analyze_detail("Main", m)
	analyze_detail("Worker", w)
	print "# Average Overhead"
	analyze_overhead(m,mc,w,wc)
	print "# Energy Savings"
	#fraction of total power
	dram_mach=0.45;
	cpu_mach = 0.55;
	#fraction of cpu power
	cpu_sram_pct = 0.35;
	cpu_inst_pct = 0.65;
	dram_ref_pct = 0.33; #dram refresh is 30 percent
	fp_sram_pct = 0.5;
	vol_dram_pct = 0.75;
	#sram savings
	sram_savings = {};
	sram_savings['agg'] = 0.90;
	sram_savings['heavy'] = 0.85;
	sram_savings['med'] = 0.80;
	#dram savings
	dram_savings = {};
	dram_savings['agg'] = 1.0;
	dram_savings['heavy'] = 1.0;
	dram_savings['med'] = 1.0;
	#fp savings
	fp_savings = {};
	fp_savings['agg'] = 0.85;
	fp_savings['heavy'] = 0.815;
	fp_savings['med'] = 0.78;
	
	fp_mix=0
	sram_factor = sram_savings[mode]*fp_sram_pct;
	dram_factor = dram_savings[mode]*vol_dram_pct;
	# 0.85 * 1 * 0.30
	factor = dram_ref_pct*dram_mach*dram_factor + cpu_mach*cpu_sram_pct*sram_factor;
	savings = p_w
	nreexec_savings =p_w_r;
	print " HARDWARE MODEL: ",mode
	print "	Max SRAM Savings:",(sram_factor*100.0)
	print "	Nominal SRAM Savings:",(sram_factor*p_w*100.0)
	print "	Nominal SRAM Savings [Without Re-executions]:",(sram_factor*p_w_r*100.0)
	print "	Max DRAM Refresh Savings:",(dram_factor*100.0)
	print "	Nominal DRAM Refresh Savings:",(dram_factor*p_w*100.0)
	print "	Nominal DRAM Refresh Savings [Without Re-executions]:",(dram_factor*p_w_r*100.0)
	print "	Max Savings:",(factor*100.0)
	print "	Nominal Savings:",(factor*p_w_r*100.0)
	print "	Nominal Savings [Without Re-executions]:",(factor*p_w*100.0)
		

	
def read():
	profile_list = {};
	for f in listdir(path):
		if isfile(join(path,f)):
			profile = {};
			if((f.split('.')[0]) == "timer"):
				profile["path"] = join(path,f)
				profile["id"] = int(f.split('.')[1]);
				profile["data"] = read_profile(join(path,f));
				profile_list[profile["id"]] = profile;
				#print profile_list.keys();
		#print profile_list
	return profile_list;

profile_list = read();
print profile_list
analyze(profile_list, model);
