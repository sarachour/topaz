#!/usr/bin/python
import matplotlib.pyplot as matplot

import sys
from os import listdir
from os.path import isfile, join
import random
import math
from numpy import array
import subprocess

total=0.0;
true_accept=0.0;
false_accept=0.0;
true_reject=0.0;
false_reject=0.0;


regions = [];
pts = {'err':[], 'corr':[], 'actual':[],'regions':[]};




def pct(n,t):
	if(t==0):
		return "div-by-zero"
	return str(round(n/t*100.0,5))+"%";

def calc_length(s,line,n):
	if(line.startswith(s+"\t")):
		return n+1;
	return n;


def plot_data(pts,name):
	
	bound_color="#2980b9"
	bound_thickness=2;
	mean_color="black"
	mean_thickness=4;
	error_color="#c0392b"
	error_size=20;
	dist_color="#bdc3c7"
	dist_size=20;
	
	for i in range(0, len(pts['corr'])):
		print "Plotting Output "+str(i)
		px = pts['corr'][i]['x']
		py = pts['corr'][i]['y']
		ex = pts['err'][i]['x']
		ey = pts['err'][i]['y']
		
		miny = min(py);
		maxy = max(py);
		minx = min(px);
		maxx = max(px);
		dy=(maxy-miny)
		maxy += dy/2;
		miny -= dy/2;
		ey = map(lambda x : max(miny+dy*0.05,min(maxy-dy*0.05,x)), ey);
		
		
		for j in range(0,len(pts['regions'][i])):
			plt = matplot.subplot(111)
			rmin = array(pts['regions'][i][j]['ymin'])
			rmax = array(pts['regions'][i][j]['ymax'])
			rx = array(pts['regions'][i][j]['x'])
			cx = pts['regions'][i][j]['x']
			cy = pts['regions'][i][j]['cy']
			
			plt.set_title("Region Evolution over time for AOV["+str(i)+"]")
			plt.set_xlim((minx,maxx))
			plt.set_ylim((miny,maxy))
			plt.set_xlabel("time elapsed");
			plt.set_ylabel("AOV Index Value");
			plt.spines['right'].set_visible(False)
			plt.spines['top'].set_visible(False)
			plt.yaxis.set_ticks_position('left')
			plt.xaxis.set_ticks_position('bottom')

			
			plt.scatter(px,py,marker="o", c=dist_color, s=dist_size, edgecolors="none", alpha=0.33);
			plt.scatter(ex,ey,marker="^", c=error_color, s=error_size, edgecolors="none");
			
			plt.plot(rx,rmin,rx,rmax,linestyle="-",c=bound_color,linewidth=bound_thickness);
			plt.plot(cx,cy,linestyle=":",c=mean_color,linewidth=mean_thickness);
			
			matplot.savefig(prefix+'.'+str(i)+".region."+str(j)+".png");
			matplot.clf();
			
	
if(len(sys.argv) < 3):
	print "logname graph-prefix task-id"
	exit(1);

 
log = sys.argv[1];
prefix = sys.argv[2];
sel_id = int(sys.argv[3]);

flog = open(log);
ssel_id = str(sel_id);
flog = open(log);
epts = [];
cpts = [];
t=0;
header = flog.readline().split('\t');
print header;


for line in flog:
	try:
		fields=line.split('\t')
		id = int(fields[header.index("ID")]);
		
		if(id != sel_id):
			continue;
		
		#is_accept = "y" in fields[header.index("IS-ACCEPT")];
		is_corr = "y" in fields[header.index("IS-CORR")];
		out_id = int(float(fields[header.index("OUT-ID")]));
		n = int(float(fields[header.index("n-regions")]));
		
		
		
		while out_id >= len(cpts):
			cpts.append([]);
			epts.append([]);
			pts['err'].append({'x':[],'y':[]});
			pts['corr'].append({'x':[],'y':[]});
			pts['regions'].append([]);
		
		while n >= len(pts['regions'][out_id]):
			pts['regions'][out_id].append({'ymin':[],'ymax':[],'x':[], 'cy':[]})
		
		cpt=float(fields[header.index("CORR-VAL")])
		ept=float(fields[header.index("VAL")])
		#print len(cpts[out_id]),len(pts['corr'][out_id]['x'])
		if(abs(ept - cpt) < 1e-4):	
			cpts[out_id].append(cpt);
		else:
			epts[out_id].append(ept);
		
		#randomly sample regions and consolidate points
		tregions=[];
		
		if out_id == 0:
			# count
			if t > 0:
				if is_accept and is_correct:
					true_accept+=1;
				elif is_accept and (not is_correct):
					false_accept+=1;
				elif (not is_accept) and is_correct:
					false_reject+=1;
				elif (not is_accept) and (not is_correct):
					true_reject+=1;
				
				total += 1;
		
			is_accept = True;
			is_correct = True;
		
		is_correct = is_correct and is_corr;
		for i in range(0,n):
			idx=header.index(str(i)+".prob");
			
			if(idx >= len(fields)):
				continue;
				
			miny = float(fields[header.index(str(i)+".min")]);
			maxy = float(fields[header.index(str(i)+".max")]);
			cy = float(fields[header.index(str(i)+".center")]);
			
			if  ept > maxy or ept < miny: 
				is_accept = False;
				
			pts['regions'][out_id][i]['ymin'].append(miny);
			pts['regions'][out_id][i]['ymax'].append(maxy);
			pts['regions'][out_id][i]['x'].append(t);
			pts['regions'][out_id][i]['cy'].append(cy);
			
		#print len(cpts),num_lines,YPROB,PDENS
		for c in cpts[out_id]:
			pts['corr'][out_id]['x'].append(t);
			pts['corr'][out_id]['y'].append(c);
				
		for e in epts[out_id]:
			pts['err'][out_id]['x'].append(t);
			pts['err'][out_id]['y'].append(e);
				
		cpts[out_id]=[];
		epts[out_id]=[];
		
		
		
		t+=1;
		
	except ValueError:
		print "skipping.."

print true_accept,false_accept,true_reject,false_reject
print "Percent True Accepts:",pct(true_accept,total)
print "Percent False Accepts:",pct(false_accept,total)
print "Percent True Rejects:",pct(true_reject,total)
print "Percent False Rejects:",pct(false_reject,total)
print "------------------------------------"
print "Percent Errors:",pct(false_accept + true_reject,total)
print "Percent Detections That Are Errors:", pct(true_reject, false_reject + true_reject)
print "Percent Errors Detected:", pct(true_reject, false_accept + true_reject)
print "Percent Errors Undetected:", pct(false_accept, false_accept + true_reject)
print "Percent Rejects:",pct(true_reject + false_reject,total)

plot_data(pts, prefix);
#print regions[0];
