#!/usr/bin/python

import matplotlib.pyplot as matplot

import sys
import math
import numpy as np
import json
import copy

def string_to_array(str):
	str = str.replace("inf","Infinity");
	str = str.replace("-nan","nan");
	str = str.replace("nan","NaN");
	k = json.loads(str);
	return k


def compute_err(err,corr):
	errs = map(lambda (x,c) : abs(x-c) , zip(err,corr));
	terr = np.sum(errs);
	return terr

def compute_rel_err(err,corr):
	errs = map(lambda (x,c) : abs(x-c)/abs(x) if abs(x) > 0 else abs(x-c), zip(err,corr));
	errs_sc = math.sqrt(np.sum(map(lambda x : x*x, errs)))
	terr = errs_sc;
	return terr
	
def check_corr(err,corr):
	EPS = 1e-3
	errs = compute_rel_err(err,corr);
	terr = np.sum(errs);
	if(terr < EPS):
		return True;
	else:
		return False;

def draw_plot(corr, err, regions, filename):
	bound_color="#2980b9"
	bound_thickness=2;
	mean_color="black"
	mean_thickness=4;
	error_color="#c0392b"
	error_size=20;
	dist_color="#bdc3c7"
	dist_size=40;
	
	px = corr['x']
	py = corr['y']
	ex = err['x']
	ey = err['y']
	
	miny = min(py);
	maxy = max(py);
	minx = min(px);
	maxx = max(px);
	dy=(maxy-miny)
	maxy += dy/2;
	miny -= dy/2;
	ey = map(lambda x : max(miny+dy*0.05,min(maxy-dy*0.05,x)), ey);
	
	matplot.clf();
	plt = matplot.subplot(111)
	
	plt.set_title("Region Evolution over Time")
	plt.set_xlim((minx,maxx))
	plt.set_ylim((miny,maxy))
	plt.set_xlabel("time elapsed");
	plt.set_ylabel("AOV Index Value");
	plt.spines['right'].set_visible(False)
	plt.spines['top'].set_visible(False)
	plt.yaxis.set_ticks_position('left')
	plt.xaxis.set_ticks_position('bottom')
	
	plt.scatter(px,py,marker="o", c=dist_color, s=dist_size, edgecolors="none", alpha=0.33);
	plt.scatter(ex,ey,marker="^", c=error_color, s=error_size, edgecolors="none");
		

	for j in range(0,len(regions)):
		minx = regions["min"][j]["x"];
		miny = regions["min"][j]["y"];
		maxx = regions["max"][j]["x"];
		maxy = regions["max"][j]["y"];
		meanx = regions["mean"][j]["x"];
		meany = regions["mean"][j]["y"];
		plt.fill_between(minx, miny, maxy, facecolor=bound_color, alpha=0.15)

		plt.plot(minx,miny,maxx,maxy,linestyle="-",c=bound_color,linewidth=bound_thickness);
		plt.plot(meanx,meany,linestyle=":",c=mean_color,linewidth=mean_thickness);
		
	matplot.savefig(filename);
	matplot.clf();
			
	
def print_det_stats(hdr,e):
	n = e["n"]
	to_pct = lambda x : x/float(n)*100;
	
	if e["tr"] + e["fa"] > 0:
		frac_caught = float(e["tr"])/float(e["tr"] + e["fa"])
	else:
		frac_caught = 1;
	
	if e["tr"] + e["fr"] > 0:
		frac_rej = float(e["tr"])/float(e["tr"] + e["fr"])
	else:
		frac_rej = 100;
	
	print "%s,n,%d" % (hdr,n)
	print "%s,true-accepts,%f" % (hdr,to_pct(e["ta"]))
	print "%s,false-accepts,%f" % (hdr,to_pct(e["fa"]))
	print "%s,true-rejects,%f" % (hdr,to_pct(e["tr"]))
	print "%s,false-rejects,%f" % (hdr,to_pct(e["fr"]))
	print "%s,errors-caught,%f" % (hdr, frac_caught*100)
	print "%s,rejs-errors,%f" % (hdr, frac_rej*100)
	print "%s,rej-rate,%f" % (hdr, to_pct(e["fr"] + e["tr"]))
	
if(len(sys.argv) < 4):
	print "Usage: logname graph selid"
	sys.exit(1)
	
log = sys.argv[1];
graph = sys.argv[2];
sel_id = int(sys.argv[3]);
flog = open(log);
ssel_id = str(sel_id);

header = flog.readline().split('\n')[0].split('\t');

#['ID', 'IID', 'RANK', 'IS-REFRESH', 'IS-FAILED', 'IS-ACCEPT', 'OUTPUT', 'CORR', 'OABS', 'CABS', 'MINS', 'MAXS', 'MEANS']
stats = {};
stats["abs"] = {"ta":0,"fa":0,"tr":0,"fr":0,"n":0};
stats["act"] = {"ta":0,"fa":0,"tr":0,"fr":0,"n":0};
data = {};


def mkseries(d,flds,l,vl):
	
	for i in range(0,len(flds)):
		fld = flds[i];
		if not(fld in d):
			d[fld] = [];
		while(len(d[fld]) < l):
			d[fld].append(copy.deepcopy(vl));
			
t=0;
nabs = 0;
for line in flog:
	try:
		fields = line.split('\n')[0].split('\t');
		id = float(fields[header.index("ID")])
		iid = float(fields[header.index("IID")])
		rank = float(fields[header.index("RANK")])
		
		if id != sel_id:
			continue;
			
		is_refresh = "refresh" in fields[header.index("IS-REFRESH")]
		is_accept = "accept" in fields[header.index("IS-ACCEPT")]
		is_failed = "failed" in fields[header.index("IS-FAILED")] 
		output = string_to_array(fields[header.index("OUTPUT")])
		key = string_to_array(fields[header.index("CORR")])
		oabs = string_to_array(fields[header.index("OABS")])
		cabs = string_to_array(fields[header.index("CABS")])
		mins =  string_to_array(fields[header.index("MINS")])
		maxs =  string_to_array(fields[header.index("MAXS")])
		means =  string_to_array(fields[header.index("MEANS")])
		is_corr = check_corr(output,key);
		is_corr_abs = check_corr(oabs,cabs);
		nabs = max(nabs,len(oabs));
		
		mkseries(data,["t_dist","t_err"],len(output),{"x":[],"y":[]});
		mkseries(data,["abs_dist","abs_err"],nabs,{"x":[],"y":[]});
		
		el = {};
		mkseries(el,["min","max","mean"],10,{"x":[],"y":[]})
		mkseries(data,["regions"],nabs, el);
		
		for i in range(0, len(output)):
			data["t_dist"][i]["x"].append(t);
			data["t_dist"][i]["y"].append(key[i]);
			
			if not is_corr:
				data["t_err"][i]["x"].append(t);
				data["t_err"][i]["y"].append(output[i]);
		
		for i in range(0, len(oabs)):
			data["abs_dist"][i]["x"].append(t);
			data["abs_dist"][i]["y"].append(cabs[i]);
			
			if not is_corr:
				data["abs_err"][i]["x"].append(t);
				data["abs_err"][i]["y"].append(oabs[i]);
		
		#traverse over outputs
		for i in range(0, len(means)):
			# traverse over regions
			for j in range(0, len(means[i])):
				data["regions"][i]["mean"][j]["x"].append(t);
				data["regions"][i]["mean"][j]["y"].append(means[i][j]);
					
				data["regions"][i]["min"][j]["x"].append(t);
				data["regions"][i]["min"][j]["y"].append(mins[i][j]);
					
				data["regions"][i]["max"][j]["x"].append(t);
				data["regions"][i]["max"][j]["y"].append(maxs[i][j]);
					
			
		if is_corr and is_accept:
			stats["act"]["ta"]+=1;
		elif is_corr and not is_accept:
			stats["act"]["fr"]+=1;
		elif not is_corr and is_accept:
			stats["act"]["fa"]+=1;
		elif not is_corr and  not is_accept:
			stats["act"]["tr"]+=1;
		
		if is_corr_abs and is_accept:
			stats["abs"]["ta"]+=1;
		elif is_corr_abs and not is_accept:
			stats["abs"]["fr"]+=1;
		elif not is_corr_abs and is_accept:
			stats["abs"]["fa"]+=1;
		elif not is_corr_abs and  not is_accept:
			stats["abs"]["tr"]+=1;
		
		stats["abs"]["n"]+=1;
		stats["act"]["n"]+=1;
		t+=1;
		
	except ValueError: 
		print "skipping..."
		continue

for i in range(0,nabs):
	pts = data["abs_dist"][i];
	errs = data["abs_err"][i];
	regions = data["regions"][i];
	filename = graph+"-"+str(i)+".png"
	draw_plot(pts,errs,regions,filename)
	
print_det_stats("actual",stats["act"]);
print_det_stats("abs",stats["abs"]);
